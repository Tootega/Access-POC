//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using STX.Core;
using STX.Core.Model;
using STX.Core.Services;
using STX.Core.Reflections;
using STX.Core.Automateds.Configuracoes;
using STX.Core.Automateds;

namespace STX.Core.Automateds.Configuracoes
{
    [XGuid("52036BC8-8CBB-4BB9-9BB2-6973D467145D", typeof(IConfiguracaoJobService))]
    public class ConfiguracaoJobService : XService, IConfiguracaoJobService
    {
        public class DBContext : XDBContext
        {
            internal static DBContext Create(XDBContext pOwner = null)
            {
                return new DBContext(new DbContextOptions<DBContext>(), pOwner);
            }

            private DBContext(DbContextOptions<DBContext> pOtions, XDBContext pOwner)
                   :base(pOtions, pOwner)
            {
            }

            internal DbSet<CORxJobConfiguracao> CORxJobConfiguracao{get; set;}

            private void ConfigureCORxJobConfiguracao(ModelBuilder pBuilder)
            {
                pBuilder.Entity<CORxJobConfiguracao>(ett =>
                {
                    ett.HasKey(e => e.CORxJobConfiguracaoID).HasName("PK_CORxJobConfiguracao");
                    
                    ett.Property(d => d.CORxJobConfiguracaoID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.Property(d => d.Dados).HasColumnType(GetDBType("Byte[]", 0, 0));
                    ett.Property(d => d.CORxJobID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.ToTable("CORxJobConfiguracao");

                    ett.HasOne(d => d.CORxJob)
                       .WithMany(p => p.CORxJobConfiguracao)
                       .HasForeignKey(d => d.CORxJobID)
                       .OnDelete(DeleteBehavior.Restrict)
                       .HasConstraintName("FK_F6BABB8A554A4A2CAA9BD16B8A9148F5");

                    ett.HasIndex(d => d.CORxJobID).HasDatabaseName("IX_F6BABB8A554A4A2CAA9BD16B8A9148F5");
                });
            }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureCORxJobConfiguracao(pBuilder);
            }
        }

        public ConfiguracaoJobService(XService pOwner)
               :base(pOwner)
        {
            _Rule = new ConfiguracaoJobRule(this);
        }

        public ConfiguracaoJobService(ILogger<XService> pLogger)
               :base(pLogger)
        {
            _Rule = new ConfiguracaoJobRule(this);
        }

        private XIServiceRuleA _Rule;

        public override Guid ID => new Guid("52036BC8-8CBB-4BB9-9BB2-6973D467145D");

        protected override XDBContext CreateContext(XDBContext pOwner)
        {
            return DBContext.Create(pOwner);
        }

        public DBContext Context
        {
            get
            {
                return (DBContext)ProtectedContext  ?? GetContext<DBContext>();
            }
        }

        [HttpPost, Route("Flush")]
        public void Flush(ConfiguracaoJobDataSet pDataSet)
        {
            var ctx = GetContext<DBContext>();
            ctx.BeginTransaction();
            _Rule?.InternalBeforeFlush(pDataSet.Tuples);

            SetConfiguracaoJobValues(ctx, pDataSet);
            ctx.SaveChanges();

            _Rule?.InternalAfterFlush(pDataSet.Tuples);

            ctx.Commit();
        }

        private void SetConfiguracaoJobValues(DBContext ctx, ConfiguracaoJobDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (ConfiguracaoJobTuple stpl in pDataSet.Tuples)
            {
                if (HasChanges(stpl, stpl.CORxJobConfiguracaoID, stpl.Dados, stpl.CORxJobID))
                {
                    var CORxJobConfiguracaotpl = new CORxJobConfiguracao();
                    CORxJobConfiguracaotpl.CORxJobConfiguracaoID = stpl.CORxJobConfiguracaoID.Value;
                    CORxJobConfiguracaotpl.Dados = stpl.Dados.Value;
                    CORxJobConfiguracaotpl.CORxJobID = stpl.CORxJobID.Value;
                    var tbl = ctx.CORxJobConfiguracao.Add(CORxJobConfiguracaotpl);
                    tbl.State = GetState(stpl, stpl.CORxJobConfiguracaoID, stpl.Dados, stpl.CORxJobID);
                }
            }
        }

        public ConfiguracaoJobDataSet GetByPK(ConfiguracaoJobRequest pRequest, Boolean pFull = true)
        {
            var dataset = Select(pRequest, pFull);
            return dataset;
        }

        public ConfiguracaoJobDataSet Select(ConfiguracaoJobRequest pRequest, Boolean pFull)
        {
            var ctx = Context;
            var query = from CORxJobConfiguracao in ctx.CORxJobConfiguracao
                        select new {CORxJobConfiguracao};

            query = _Rule?.InternalGetWhere(query, pRequest, pFull);

            if (pRequest != null)
                query = query.Where(q => q.CORxJobConfiguracao.CORxJobConfiguracaoID == pRequest.CORxJobConfiguracaoID);

            var dst = query.Select(q => new ConfiguracaoJobTuple(){CORxJobConfiguracaoID = new XGuidDataField(q.CORxJobConfiguracao.CORxJobConfiguracaoID),
                                       Dados = new XBinaryDataField(q.CORxJobConfiguracao.Dados),
                                       CORxJobID = new XGuidDataField(q.CORxJobConfiguracao.CORxJobID)});
            var dataset = new ConfiguracaoJobDataSet { Tuples = dst.ToList() };
            _Rule.InternalAfterSelect(dataset.Tuples);
            return dataset;
        }
    }
}