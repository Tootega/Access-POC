//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using STX.Core.Access.DB;
using STX.Core.Model;
using TFX.Core.Model;
using TFX.Access.Model;
using STX.Core.Services;
using STX.Core.Access.Usuarios;

namespace STX.Core.Access.Usuarios
{

    public class UsuariosAtivosService : XService
    {
        public class DBContext : XDBContext
        {
            internal static DBContext Create(XDBContext pOwner = null)
            {

                return new DBContext(new DbContextOptions<DBContext>(), pOwner);
            }

            private DBContext(DbContextOptions<DBContext> pOtions, XDBContext pOwner)
                   :base(pOtions, pOwner)
            {
            }

            internal DbSet<TAFxUsuario> TAFxUsuario{get; set;}

            private void ConfigureTAFxUsuario(ModelBuilder pBuilder)
            {
                pBuilder.Entity<TAFxUsuario>(ett =>
                {
                    ett.HasKey(e => e.TAFxUsuarioID).HasName("PK_TAFxUsuario");
                    
                    ett.Property(d => d.TAFxUsuarioID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.Property(d => d.Login).HasColumnType(GetDBType("String", 0, 0));
                    ett.Property(d => d.Ativo).HasColumnType(GetDBType("Int16", 0, 0));
                    ett.ToTable("TAFxUsuario");
                });
            }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureTAFxUsuario(pBuilder);
            }

            protected override void OnConfiguring(DbContextOptionsBuilder pOtionsBuilder)
            {
#if DEBUG
                pOtionsBuilder.EnableSensitiveDataLogging(true);
                pOtionsBuilder.LogTo(s => Debug.WriteLine(s));
                pOtionsBuilder.EnableDetailedErrors(true);
                pOtionsBuilder.EnableSensitiveDataLogging(true);
#endif
                base.OnConfiguring(pOtionsBuilder);
            }
        }

        public UsuariosAtivosService(XService pOwner)
               :base(pOwner)
        {
            _Rule = new UsuariosAtivosRule(this);
        }

        public UsuariosAtivosService(ILogger<XService> pLogger)
               :base(pLogger)
        {
            _Rule = new UsuariosAtivosRule(this);
        }

        protected override XDBContext CreateContext(XDBContext pOwner)
        {
            return DBContext.Create(pOwner);
        }

        private XIServiceRuleA _Rule;

        public DBContext Context
        {
            get
            {
                return (DBContext)ProtectedContext  ?? GetContext<DBContext>();
            }
        }
        public abstract class XRule : XServiceRuleA<List<UsuariosAtivosTuple>, UsuariosAtivosRequest>
        {
            public XRule(XService pOwner)
                :base(pOwner)
            {
            }
        }


        public void Flush(UsuariosAtivosDataSet pDataSet)
        {

            using (var ctx = GetContext<DBContext>())
            {
                ctx.BeginTransaction();
                _Rule?.InternalBeforeFlush(pDataSet.Tuples);

                SetUsuariosAtivosValues(ctx, pDataSet);
                ctx.SaveChanges();

                _Rule?.InternalAfterFlush(pDataSet.Tuples);

                ctx.Commit();
            }
        }

        private void SetUsuariosAtivosValues(DBContext ctx, UsuariosAtivosDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (UsuariosAtivosTuple stpl in pDataSet.Tuples)
            {
                if (HasChanges(stpl, stpl.TAFxUsuarioID, stpl.Login, stpl.Ativo))
                {
                    var TAFxUsuariotpl = new TAFxUsuario();
                    TAFxUsuariotpl.TAFxUsuarioID = (Guid)stpl.TAFxUsuarioID.Value;
                    TAFxUsuariotpl.Login = (String)stpl.Login.Value;
                    TAFxUsuariotpl.Ativo = (Int16)stpl.Ativo.Value;
                    ctx.Add(TAFxUsuariotpl).State = GetState(stpl, stpl.TAFxUsuarioID, stpl.Login, stpl.Ativo);
                    ctx.SaveChanges();
                }
            }
        }


        public UsuariosAtivosDataSet Select(UsuariosAtivosRequest pRequest, Boolean pFull)
        {
            var ctx = Context;
            var query = from TAFxUsuario in ctx.TAFxUsuario
                        select new {TAFxUsuario};

            query = _Rule?.InternalGetWhere(query, pRequest, pFull);

            if (pRequest != null)
                query = query.Where(q => q.TAFxUsuario.TAFxUsuarioID == pRequest.TAFxUsuarioID);

            var dst = query.Select(q => new UsuariosAtivosTuple(){TAFxUsuarioID = new XGuidDataField("TAFxUsuarioID", XFieldState.Empty, q.TAFxUsuario.TAFxUsuarioID),
                                      Login = new XStringDataField("Login", XFieldState.Empty, q.TAFxUsuario.Login),
                                      Ativo = new XInt16DataField("Ativo", XFieldState.Empty, q.TAFxUsuario.Ativo)});
            var dataset = new UsuariosAtivosDataSet { Tuples = dst.ToList() };
            _Rule.InternalAfterSelect(dataset.Tuples);
            return dataset;
        }
    }
}