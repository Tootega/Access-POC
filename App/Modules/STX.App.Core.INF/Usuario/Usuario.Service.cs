//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using STX.Core;
using STX.Core.Access.DB;
using STX.Core.Model;
using STX.Core.Services;
using STX.App.Core.INF.Usuario;
using STX.App.Core.INF.DB;

namespace STX.App.Core.INF.Usuario
{
    public class UsuarioService : XService, IUsuarioService
    {
        public class DBContext : XDBContext
        {
            internal static DBContext Create(XDBContext pOwner = null)
            {
                return new DBContext(new DbContextOptions<DBContext>(), pOwner);
            }

            private DBContext(DbContextOptions<DBContext> pOtions, XDBContext pOwner)
                   :base(pOtions, pOwner)
            {
            }

            internal DbSet<TAFxUsuario> TAFxUsuario{get; set;}
            internal DbSet<CORxUsuario> CORxUsuario{get; set;}
            internal DbSet<CORxPessoa> CORxPessoa{get; set;}

            private void ConfigureTAFxUsuario(ModelBuilder pBuilder)
            {
                pBuilder.Entity<TAFxUsuario>(ett =>
                {
                    ett.HasKey(e => e.TAFxUsuarioID).HasName("PK_TAFxUsuario");
                    
                    ett.Property(d => d.TAFxUsuarioID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.Property(d => d.Login).HasColumnType(GetDBType("String", 0, 0));
                    ett.Property(d => d.CORxEstadoID).HasColumnType(GetDBType("Int16", 0, 0));
                    ett.ToTable("TAFxUsuario");
                });
            }
            private void ConfigureCORxUsuario(ModelBuilder pBuilder)
            {
                pBuilder.Entity<CORxUsuario>(ett =>
                {
                    ett.HasKey(e => e.CORxUsuarioID).HasName("PK_CORxUsuario");
                    
                    ett.Property(d => d.CORxUsuarioID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.ToTable("CORxUsuario");

                    ett.HasOne(d => d.TAFxUsuario)
                       .WithMany()
                       .HasForeignKey(d => d.CORxUsuarioID)
                       .OnDelete(DeleteBehavior.Restrict)
                       .HasConstraintName("FK_74C786F513D84B83B262F901573BCE27");

                    ett.HasOne(d => d.CORxPessoa)
                       .WithMany(p => p.CORxUsuario)
                       .HasForeignKey(d => d.CORxPessoaID)
                       .OnDelete(DeleteBehavior.Restrict)
                       .HasConstraintName("FK_C9471B8665C04206AC2FBA967434C37A");

                    ett.HasIndex(d => d.CORxUsuarioID).HasDatabaseName("IX_74C786F513D84B83B262F901573BCE27");
                    ett.HasIndex(d => d.CORxPessoaID).HasDatabaseName("IX_C9471B8665C04206AC2FBA967434C37A");
                });
            }
            private void ConfigureCORxPessoa(ModelBuilder pBuilder)
            {
                pBuilder.Entity<CORxPessoa>(ett =>
                {
                    ett.HasKey(e => e.CORxPessoaID).HasName("PK_CORxPessoa");
                    
                    ett.Property(d => d.CORxPessoaID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 256, 0));
                    ett.ToTable("CORxPessoa");
                });
            }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureTAFxUsuario(pBuilder);
                ConfigureCORxUsuario(pBuilder);
                ConfigureCORxPessoa(pBuilder);
            }
        }

        public UsuarioService(XService pOwner)
               :base(pOwner)
        {
            _Rule = new UsuarioRule(this);
        }

        public UsuarioService(ILogger<XService> pLogger)
               :base(pLogger)
        {
            _Rule = new UsuarioRule(this);
        }

        private XIServiceRuleC _Rule;

        protected override XDBContext CreateContext(XDBContext pOwner)
        {
            return DBContext.Create(pOwner);
        }

        public DBContext Context
        {
            get
            {
                return (DBContext)ProtectedContext  ?? GetContext<DBContext>();
            }
        }

        public void Flush(UsuarioDataSet pDataSet)
        {

            using (var ctx = GetContext<DBContext>())
            {
                ctx.BeginTransaction();
                _Rule?.InternalBeforeFlush(pDataSet.Tuples);

                SetUsuarioValues(ctx, pDataSet);
                ctx.SaveChanges();

                _Rule?.InternalAfterFlush(pDataSet.Tuples);

                ctx.Commit();
            }
        }

        private void SetUsuarioValues(DBContext ctx, UsuarioDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (UsuarioTuple stpl in pDataSet.Tuples)
            {
                if (HasChanges(stpl, stpl.CORxUsuarioID, stpl.CORxPessoaID))
                {
                    var CORxUsuariotpl = new CORxUsuario();
                    CORxUsuariotpl.CORxUsuarioID = (Guid)stpl.CORxUsuarioID.Value;
                    CORxUsuariotpl.CORxPessoaID = (Guid)stpl.CORxPessoaID.Value;
                    ctx.Add(CORxUsuariotpl).State = GetState(stpl, stpl.CORxUsuarioID, stpl.CORxPessoaID);
                    //ctx.SaveChanges();
                }

                if (HasChanges(stpl, stpl.CORxUsuarioID, stpl.Login, stpl.CORxEstadoID))
                {
                    var TAFxUsuariotpl = new TAFxUsuario();
                    TAFxUsuariotpl.TAFxUsuarioID = (Guid)stpl.CORxUsuarioID.Value;
                    TAFxUsuariotpl.Login = (String)stpl.Login.Value;
                    TAFxUsuariotpl.CORxEstadoID = (Int16)stpl.CORxEstadoID.Value;
                    ctx.Add(TAFxUsuariotpl).State = GetState(stpl, stpl.CORxUsuarioID, stpl.Login, stpl.CORxEstadoID);
                    //ctx.SaveChanges();
                }

                if (HasChanges(stpl, stpl.CORxPessoaID, stpl.Nome))
                {
                    var CORxPessoatpl = new CORxPessoa();
                    CORxPessoatpl.CORxPessoaID = (Guid)stpl.CORxPessoaID.Value;
                    CORxPessoatpl.Nome = (String)stpl.Nome.Value;
                    ctx.Add(CORxPessoatpl).State = GetState(stpl, stpl.CORxPessoaID, stpl.Nome);
                    //ctx.SaveChanges();
                }
            }
        }

        public UsuarioDataSet GetByPK(UsuarioRequest pRequest, Boolean pFull = true)
        {
            var dataset = Select(pRequest, null, pFull);
            return dataset;
        }

        UsuarioDataSet IUsuarioService.Select(UsuarioFilter pFilter, Boolean pFull = false)
        {
            var dataset = Select(null, pFilter, pFull);
            return dataset;
        }

        public UsuarioDataSet Select(UsuarioRequest pRequest, UsuarioFilter pFilter, Boolean pFull)
        {
            var ctx = Context;
            var query = from CORxUsuario in ctx.CORxUsuario
                        join TAFxUsuario in ctx.TAFxUsuario on CORxUsuario.CORxUsuarioID equals TAFxUsuario.TAFxUsuarioID
                        join CORxPessoa in ctx.CORxPessoa on CORxUsuario.CORxPessoaID equals CORxPessoa.CORxPessoaID
                        select new {TAFxUsuario, CORxUsuario, CORxPessoa};

            query = _Rule?.InternalGetWhere(query,  pRequest, pFilter, pFull);

            if (pRequest != null)
                query = query.Where(q => q.CORxUsuario.CORxUsuarioID == pRequest.CORxUsuarioID);

            if (pFilter != null)
            {
                if (pFilter.Nome != null && pFilter.Nome.State != XFieldState.Empty)
                    query = query.Where(q => q.CORxPessoa.Nome == pFilter.Nome.Value);
                if (pFilter.Login != null && pFilter.Login.State != XFieldState.Empty)
                    query = query.Where(q => q.TAFxUsuario.Login == pFilter.Login.Value);
            }

            if (pFilter?.SkipRows > 0)
                query = query.Skip(pFilter.SkipRows);

            if (pFilter?.TakeRows > 0)
                query = query.Take(pFilter.TakeRows);

            var dst = query.Select(q => new UsuarioTuple(){Login = new XStringDataField(XFieldState.Empty, q.TAFxUsuario.Login),
                               CORxEstadoID = new XInt16DataField(XFieldState.Empty, q.TAFxUsuario.CORxEstadoID),
                               CORxUsuarioID = new XGuidDataField(XFieldState.Empty, q.CORxUsuario.CORxUsuarioID),
                               CORxPessoaID = new XGuidDataField(XFieldState.Empty, q.CORxPessoa.CORxPessoaID),
                               Nome = new XStringDataField(XFieldState.Empty, q.CORxPessoa.Nome)});
            var dataset = new UsuarioDataSet { Tuples = dst.ToList() };
            _Rule.InternalAfterSelect(dataset.Tuples);
            return dataset;
        }
    }
}
