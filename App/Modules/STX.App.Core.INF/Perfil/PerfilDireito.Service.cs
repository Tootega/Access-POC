//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using STX.Core;
using STX.Core.Access.DB;
using STX.Core.Model;
using STX.Core.Services;
using STX.App.Core.INF.Perfil;
using STX.App.Core.INF.DB;

namespace STX.App.Core.INF.Perfil
{
    public class PerfilDireitoService : XService, IPerfilDireitoService
    {
        public class DBContext : XDBContext
        {
            internal static DBContext Create(XDBContext pOwner = null)
            {
                return new DBContext(new DbContextOptions<DBContext>(), pOwner);
            }

            private DBContext(DbContextOptions<DBContext> pOtions, XDBContext pOwner)
                   :base(pOtions, pOwner)
            {
            }

            internal DbSet<CORxPerfilDireiro> CORxPerfilDireiro{get; set;}
            internal DbSet<CORxDireiro> CORxDireiro{get; set;}
            internal DbSet<CORxRecursoDireito> CORxRecursoDireito{get; set;}
            internal DbSet<CORxRecurso> CORxRecurso{get; set;}
            internal DbSet<CORxEstado> CORxEstado{get; set;}

            private void ConfigureCORxPerfilDireiro(ModelBuilder pBuilder)
            {
                pBuilder.Entity<CORxPerfilDireiro>(ett =>
                {
                    ett.HasKey(e => e.CORxPerfilDireiroID).HasName("PK_CORxPerfilDireiro");
                    
                    ett.Property(d => d.CORxPerfilDireiroID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.Property(d => d.CORxPerfilID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.Property(d => d.SYSxEstadoID).HasColumnType(GetDBType("Int16", 0, 0));
                    ett.Property(d => d.CORxRecursoDireitoID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.ToTable("CORxPerfilDireiro");

                    ett.HasOne(d => d.CORxPerfil)
                       .WithMany(p => p.CORxPerfilDireiro)
                       .HasForeignKey(d => d.CORxPerfilID)
                       .OnDelete(DeleteBehavior.Restrict)
                       .HasConstraintName("FK_DB2EF4796E004A85B4BBEC4BAFB60B61");

                    ett.HasOne(d => d.CORxRecursoDireito)
                       .WithMany(p => p.CORxPerfilDireiro)
                       .HasForeignKey(d => d.CORxRecursoDireitoID)
                       .OnDelete(DeleteBehavior.Restrict)
                       .HasConstraintName("FK_43FA8B4D965A44388AB05C4C95CD4120");

                    ett.HasOne(d => d.CORxEstado)
                       .WithMany(p => p.CORxPerfilDireiro)
                       .HasForeignKey(d => d.SYSxEstadoID)
                       .OnDelete(DeleteBehavior.Restrict)
                       .HasConstraintName("FK_C81CBAAB358F4F87B64A7EFD7808B76B");

                    ett.HasIndex(d => d.CORxPerfilID).HasDatabaseName("IX_DB2EF4796E004A85B4BBEC4BAFB60B61");
                    ett.HasIndex(d => d.SYSxEstadoID).HasDatabaseName("IX_C81CBAAB358F4F87B64A7EFD7808B76B");
                    ett.HasIndex(d => d.CORxRecursoDireitoID).HasDatabaseName("IX_43FA8B4D965A44388AB05C4C95CD4120");

                    ett.HasIndex(e => new { e.CORxPerfilID, e.CORxPerfilDireiroID })
                        .IsUnique()
                        .HasDatabaseName("IX_8EA98120_28B4_458C_946B_E9B0000C518D");
                });
            }
            private void ConfigureCORxDireiro(ModelBuilder pBuilder)
            {
                pBuilder.Entity<CORxDireiro>(ett =>
                {
                    ett.HasKey(e => e.CORxDireiroID).HasName("PK_CORxDireiro");
                    
                    ett.Property(d => d.CORxDireiroID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.Property(d => d.Direito).HasColumnType(GetDBType("String", 45, 0));
                    ett.ToTable("CORxDireiro");
                });
            }
            private void ConfigureCORxRecursoDireito(ModelBuilder pBuilder)
            {
                pBuilder.Entity<CORxRecursoDireito>(ett =>
                {
                    ett.HasKey(e => e.CORxRecursoDireitoID).HasName("PK_CORxRecursoDireito");
                    
                    ett.Property(d => d.CORxRecursoDireitoID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.Property(d => d.CORxDireiroID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.Property(d => d.CORxRecursoID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.Property(d => d.SYSxEstadoID).HasColumnType(GetDBType("Int16", 0, 0));
                    ett.ToTable("CORxRecursoDireito");

                    ett.HasOne(d => d.CORxDireiro)
                       .WithMany(p => p.CORxRecursoDireito)
                       .HasForeignKey(d => d.CORxDireiroID)
                       .OnDelete(DeleteBehavior.Restrict)
                       .HasConstraintName("FK_FEBE37E773C04510917C09AA991BA695");

                    ett.HasOne(d => d.CORxEstado)
                       .WithMany(p => p.CORxRecursoDireito)
                       .HasForeignKey(d => d.SYSxEstadoID)
                       .OnDelete(DeleteBehavior.Restrict)
                       .HasConstraintName("FK_662808A15CC541869E041EB76DBF81F2");

                    ett.HasOne(d => d.CORxRecurso)
                       .WithMany(p => p.CORxRecursoDireito)
                       .HasForeignKey(d => d.CORxRecursoID)
                       .OnDelete(DeleteBehavior.Restrict)
                       .HasConstraintName("FK_63A2BC55DE5B48F9B50DB67210086133");

                    ett.HasIndex(d => d.CORxDireiroID).HasDatabaseName("IX_FEBE37E773C04510917C09AA991BA695");
                    ett.HasIndex(d => d.CORxRecursoID).HasDatabaseName("IX_63A2BC55DE5B48F9B50DB67210086133");
                    ett.HasIndex(d => d.SYSxEstadoID).HasDatabaseName("IX_662808A15CC541869E041EB76DBF81F2");

                    ett.HasIndex(e => new { e.CORxDireiroID, e.CORxRecursoID })
                        .IsUnique()
                        .HasDatabaseName("IX_29FB7252_4D26_4B87_85F7_DED1FB18AC29");
                });
            }
            private void ConfigureCORxRecurso(ModelBuilder pBuilder)
            {
                pBuilder.Entity<CORxRecurso>(ett =>
                {
                    ett.HasKey(e => e.CORxRecursoID).HasName("PK_CORxRecurso");
                    
                    ett.Property(d => d.CORxRecursoID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 128, 0));
                    ett.Property(d => d.CORxMenuItemID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.ToTable("CORxRecurso");

                    ett.HasOne(d => d.CORxMenuItem)
                       .WithMany(p => p.CORxRecurso)
                       .HasForeignKey(d => d.CORxMenuItemID)
                       .OnDelete(DeleteBehavior.Restrict)
                       .HasConstraintName("FK_DD2B2F889A7341ACB8763984D8EB927F");

                    ett.HasIndex(d => d.CORxMenuItemID).HasDatabaseName("IX_DD2B2F889A7341ACB8763984D8EB927F");
                });
            }
            private void ConfigureCORxEstado(ModelBuilder pBuilder)
            {
                pBuilder.Entity<CORxEstado>(ett =>
                {
                    ett.HasKey(e => e.CORxEstadoID).HasName("PK_CORxEstado");
                    
                    ett.Property(d => d.CORxEstadoID).HasColumnType(GetDBType("Int16", 0, 0));
                    ett.Property(d => d.Estado).HasColumnType(GetDBType("String", 20, 0));
                    ett.ToTable("CORxEstado");
                });
            }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureCORxPerfilDireiro(pBuilder);
                ConfigureCORxDireiro(pBuilder);
                ConfigureCORxRecursoDireito(pBuilder);
                ConfigureCORxRecurso(pBuilder);
                ConfigureCORxEstado(pBuilder);
            }
        }

        public PerfilDireitoService(XService pOwner)
               :base(pOwner)
        {
            _Rule = new PerfilDireitoRule(this);
        }

        public PerfilDireitoService(ILogger<XService> pLogger)
               :base(pLogger)
        {
            _Rule = new PerfilDireitoRule(this);
        }

        private XIServiceRuleA _Rule;

        protected override XDBContext CreateContext(XDBContext pOwner)
        {
            return DBContext.Create(pOwner);
        }

        public DBContext Context
        {
            get
            {
                return (DBContext)ProtectedContext  ?? GetContext<DBContext>();
            }
        }

        public void Flush(PerfilDireitoDataSet pDataSet)
        {

            using (var ctx = GetContext<DBContext>())
            {
                ctx.BeginTransaction();
                _Rule?.InternalBeforeFlush(pDataSet.Tuples);

                SetPerfilDireitoValues(ctx, pDataSet);
                ctx.SaveChanges();

                _Rule?.InternalAfterFlush(pDataSet.Tuples);

                ctx.Commit();
            }
        }

        private void SetPerfilDireitoValues(DBContext ctx, PerfilDireitoDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (PerfilDireitoTuple stpl in pDataSet.Tuples)
            {
                if (HasChanges(stpl, stpl.CORxPerfilDireiroID, stpl.CORxPerfilID, stpl.SYSxEstadoID, stpl.CORxRecursoDireitoID))
                {
                    var CORxPerfilDireirotpl = new CORxPerfilDireiro();
                    CORxPerfilDireirotpl.CORxPerfilDireiroID = (Guid)stpl.CORxPerfilDireiroID.Value;
                    CORxPerfilDireirotpl.CORxPerfilID = (Guid)stpl.CORxPerfilID.Value;
                    CORxPerfilDireirotpl.SYSxEstadoID = (Int16)stpl.SYSxEstadoID.Value;
                    CORxPerfilDireirotpl.CORxRecursoDireitoID = (Guid)stpl.CORxRecursoDireitoID.Value;
                    ctx.Add(CORxPerfilDireirotpl).State = GetState(stpl, stpl.CORxPerfilDireiroID, stpl.CORxPerfilID, stpl.SYSxEstadoID, stpl.CORxRecursoDireitoID);
                    ctx.SaveChanges();
                }
            }
        }

        public PerfilDireitoDataSet GetByPK(PerfilDireitoRequest pRequest, Boolean pFull = true)
        {
            var dataset = Select(pRequest, pFull);
            return dataset;
        }

        public PerfilDireitoDataSet Select(PerfilDireitoRequest pRequest, Boolean pFull)
        {
            var ctx = Context;
            var query = from CORxPerfilDireiro in ctx.CORxPerfilDireiro
                        join CORxRecursoDireito in ctx.CORxRecursoDireito on CORxPerfilDireiro.CORxRecursoDireitoID equals CORxRecursoDireito.CORxRecursoDireitoID
                        join CORxRecurso in ctx.CORxRecurso on CORxRecursoDireito.CORxRecursoID equals CORxRecurso.CORxRecursoID
                        join CORxDireiro in ctx.CORxDireiro on CORxRecursoDireito.CORxDireiroID equals CORxDireiro.CORxDireiroID
                        join CORxEstado in ctx.CORxEstado on CORxRecursoDireito.SYSxEstadoID equals CORxEstado.CORxEstadoID
                        select new {CORxPerfilDireiro, CORxDireiro, CORxRecursoDireito, CORxRecurso, CORxEstado};

            query = _Rule?.InternalGetWhere(query, pRequest, pFull);

            if (pRequest != null)
                query = query.Where(q => q.CORxPerfilDireiro.CORxPerfilDireiroID == pRequest.CORxPerfilDireiroID);

            var dst = query.Select(q => new PerfilDireitoTuple(){CORxPerfilID = new XGuidDataField(XFieldState.Empty, q.CORxPerfilDireiro.CORxPerfilID),
                                     Direito = new XStringDataField(XFieldState.Empty, q.CORxDireiro.Direito),
                                     Estado = new XStringDataField(XFieldState.Empty, q.CORxEstado.Estado),
                                     Nome = new XStringDataField(XFieldState.Empty, q.CORxRecurso.Nome),
                                     SYSxEstadoID = new XInt16DataField(XFieldState.Empty, q.CORxPerfilDireiro.SYSxEstadoID),
                                     CORxPerfilDireiroID = new XGuidDataField(XFieldState.Empty, q.CORxPerfilDireiro.CORxPerfilDireiroID),
                                     CORxRecursoDireitoID = new XGuidDataField(XFieldState.Empty, q.CORxPerfilDireiro.CORxRecursoDireitoID)});
            var dataset = new PerfilDireitoDataSet { Tuples = dst.ToList() };
            _Rule.InternalAfterSelect(dataset.Tuples);
            return dataset;
        }
    }
}