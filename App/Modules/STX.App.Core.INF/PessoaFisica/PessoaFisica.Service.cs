//<auto-generated/>
using System;
using System.Linq;
using System.Collections.Generic;
using System.Diagnostics;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Logging;
using STX.Core;
using STX.Core.Access.DB;
using STX.Core.Model;
using STX.Core.Services;
using STX.App.Core.INF.PessoaFisica;
using STX.App.Core.INF.DB;

namespace STX.App.Core.INF.PessoaFisica
{
    public class PessoaFisicaService : XService, IPessoaFisicaService
    {
        public class DBContext : XDBContext
        {
            internal static DBContext Create(XDBContext pOwner = null)
            {
                return new DBContext(new DbContextOptions<DBContext>(), pOwner);
            }

            private DBContext(DbContextOptions<DBContext> pOtions, XDBContext pOwner)
                   :base(pOtions, pOwner)
            {
            }

            internal DbSet<CORxPessoaFisica> CORxPessoaFisica{get; set;}

            private void ConfigureCORxPessoaFisica(ModelBuilder pBuilder)
            {
                pBuilder.Entity<CORxPessoaFisica>(ett =>
                {
                    ett.HasKey(e => e.CORxPessoaFisicaID).HasName("PK_CORxPessoaFisica");
                    
                    ett.Property(d => d.CORxPessoaFisicaID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.Property(d => d.Nome).HasColumnType(GetDBType("String", 150, 0));
                    ett.Property(d => d.Enderecos).HasColumnType(GetDBType("String", 150, 0));
                    ett.Property(d => d.CORxUsuarioID).HasColumnType(GetDBType("Guid", 0, 0));
                    ett.ToTable("CORxPessoaFisica");

                    ett.HasOne(d => d.CORxUsuario)
                      .WithMany(p => p.CORxPessoaFisica)
                       .HasForeignKey(d => d.CORxUsuarioID)
                       .OnDelete(DeleteBehavior.Restrict)
                       .HasConstraintName("FK_8F4837CF83834503A361901ABE856933");

                    ett.HasIndex(d => d.CORxUsuarioID).HasDatabaseName("IX_8F4837CF83834503A361901ABE856933");

                    ett.HasIndex(e => new { e.CORxUsuarioID, e.Enderecos })
                        .IsUnique()
                        .HasDatabaseName("IX_04649D25_B2D7_4F39_BB3E_C637F0FE92A2");
                });
            }

            protected override void OnModelCreating(ModelBuilder pBuilder)
            {
                ConfigureCORxPessoaFisica(pBuilder);
            }
        }

        public PessoaFisicaService(XService pOwner)
               :base(pOwner)
        {
            _Rule = new PessoaFisicaRule(this);
        }

        public PessoaFisicaService(ILogger<XService> pLogger)
               :base(pLogger)
        {
            _Rule = new PessoaFisicaRule(this);
        }

        private XIServiceRuleC _Rule;

        protected override XDBContext CreateContext(XDBContext pOwner)
        {
            return DBContext.Create(pOwner);
        }

        public DBContext Context
        {
            get
            {
                return (DBContext)ProtectedContext  ?? GetContext<DBContext>();
            }
        }

        public void Flush(PessoaFisicaDataSet pDataSet)
        {

            using (var ctx = GetContext<DBContext>())
            {
                ctx.BeginTransaction();
                _Rule?.InternalBeforeFlush(pDataSet.Tuples);

                SetPessoaFisicaValues(ctx, pDataSet);
                ctx.SaveChanges();

                _Rule?.InternalAfterFlush(pDataSet.Tuples);

                ctx.Commit();
            }
        }

        private void SetPessoaFisicaValues(DBContext ctx, PessoaFisicaDataSet pDataSet)
        {
            if (pDataSet == null || pDataSet.Tuples == null)
                return;
            foreach (PessoaFisicaTuple stpl in pDataSet.Tuples)
            {
                if (HasChanges(stpl, stpl.CORxPessoaFisicaID, stpl.Nome, stpl.Enderecos, stpl.CORxUsuarioID))
                {
                    var CORxPessoaFisicatpl = new CORxPessoaFisica();
                    CORxPessoaFisicatpl.CORxPessoaFisicaID = (Guid)stpl.CORxPessoaFisicaID.Value;
                    CORxPessoaFisicatpl.Nome = (String?)stpl.Nome?.Value;
                    CORxPessoaFisicatpl.Enderecos = (String)stpl.Enderecos.Value;
                    CORxPessoaFisicatpl.CORxUsuarioID = (Guid)stpl.CORxUsuarioID.Value;
                    ctx.Add(CORxPessoaFisicatpl).State = GetState(stpl, stpl.CORxPessoaFisicaID, stpl.Nome, stpl.Enderecos, stpl.CORxUsuarioID);
                    ctx.SaveChanges();
                }
            }
        }

        public PessoaFisicaDataSet GetByPK(PessoaFisicaRequest pRequest, Boolean pFull = true)
        {
            var dataset = Select(pRequest, null, pFull);
            return dataset;
        }

        PessoaFisicaDataSet IPessoaFisicaService.Select(PessoaFisicaFilter pFilter, Boolean pFull = false)
        {
            var dataset = Select(null, pFilter, pFull);
            return dataset;
        }

        public PessoaFisicaDataSet Select(PessoaFisicaRequest pRequest, PessoaFisicaFilter pFilter, Boolean pFull)
        {
            var ctx = Context;
            var query = from CORxPessoaFisica in ctx.CORxPessoaFisica
                        select new {CORxPessoaFisica};

            query = _Rule?.InternalGetWhere(query,  pRequest, pFilter, pFull);

            if (pRequest != null)
                query = query.Where(q => q.CORxPessoaFisica.CORxPessoaFisicaID == pRequest.CORxPessoaFisicaID);

            if (pFilter != null)
            {
                if (pFilter.Enderecos != null && pFilter.Enderecos.State != XFieldState.Empty)
                    query = query.Where(q => EF.Functions.Like(q.CORxPessoaFisica.Enderecos, pFilter.Enderecos.Value + "%"));
                if (pFilter.Nome != null && pFilter.Nome.State != XFieldState.Empty)
                    query = query.Where(q => EF.Functions.Like(q.CORxPessoaFisica.Nome, pFilter.Nome.Value + "%"));
            }

            if (pFilter?.SkipRows > 0)
                query = query.Skip(pFilter.SkipRows);

            if (pFilter?.TakeRows > 0)
                query = query.Take(pFilter.TakeRows);

            var dst = query.Select(q => new PessoaFisicaTuple(){CORxPessoaFisicaID = new XGuidDataField(XFieldState.Empty, q.CORxPessoaFisica.CORxPessoaFisicaID),
                                    Nome = new XStringDataField(XFieldState.Empty, q.CORxPessoaFisica.Nome),
                                    Enderecos = new XStringDataField(XFieldState.Empty, q.CORxPessoaFisica.Enderecos),
                                    CORxUsuarioID = new XGuidDataField(XFieldState.Empty, q.CORxPessoaFisica.CORxUsuarioID)});
            var dataset = new PessoaFisicaDataSet { Tuples = dst.ToList() };
            _Rule.InternalAfterSelect(dataset.Tuples);
            return dataset;
        }
    }
}