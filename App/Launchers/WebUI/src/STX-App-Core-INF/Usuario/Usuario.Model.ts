//<auto-generated/>
import { XRule } from '../../material/Component/XComponent';
export namespace STXAppCoreINFUsuarioUsuarioMDL
{

    export class UsuarioRule extends XRule<UsuarioDataSet>
    {
    }

    export class UsuarioTuple extends XDataTuple
    {
        constructor(pSource?: any)
        {
            super();
            this.Assign(pSource);
        }

            override GetPKValue(): any { return this.CORxUsuarioID.Value; }

        Login = new XDataField('Login', XFieldState.Empty, () => 'XString', () => '');
        Ativo = new XDataField('Ativo', XFieldState.Empty, () => 'XInt16', () => '');
        CORxUsuarioID = new XDataField('CORxUsuarioID', XFieldState.Empty, () => 'XGuid', () => '');
        CORxPessoaID = new XDataField('CORxPessoaID', XFieldState.Empty, () => 'XGuid', () => '');
        Nome = new XDataField('Nome', XFieldState.Empty, () => 'XString', () => '');

    }

    export class UsuarioDataSet extends XDataSet<UsuarioTuple>
    {
        constructor(pDataSet?: UsuarioDataSet)
        {
            super();
            if (pDataSet != null)
                this.Assign(UsuarioTuple, pDataSet);
            for (var i = 0; i < this.Tuples.length; i++)
            {
                let ttpl = this.Tuples[i];
                let stpl = pDataSet.Tuples[i];
            }
        }
    }

    export class UsuarioRequest extends XRequest
    {
        CORxUsuarioID?: string;
    }

    export class UsuarioFilter extends XFilter
    {
        Nome = new XDataField('Nome', XFieldState.Empty, () => 'XString', () => '');
        Login = new XDataField('Login', XFieldState.Empty, () => 'XString', () => '');
    }
}
