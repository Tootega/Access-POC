//<auto-generated/>
import { XRule } from '../../material/Component/XComponent';
export namespace STXCoreAutomatedsJobsJobMDL
{

    export class JobRule extends XRule<JobDataSet>
    {
    }

    export class JobTuple extends XDataTuple
    {
        constructor(pSource?: any)
        {
            super();
            this.Assign(pSource);
        }

        override GetPKValue(): any { return this.CORxJobID.Value; }

        CORxJobID = new XDataField(XFieldState.Empty, () => 'XGuid', () => '', null, null, 'c7937edf-c8c2-44c9-baae-235740202287');
        Nome = new XDataField(XFieldState.Empty, () => 'XString', () => '', null, null, '7526f6f1-4dba-49c1-8cf8-0e45f65356fd');

    }

    export class JobDataSet extends XDataSet<JobTuple>
    {
        constructor(pDataSet?: JobDataSet)
        {
            super();
            if (pDataSet != null)
                this.Assign(JobTuple, pDataSet);
            if (!this.Tuples)
                this.Tuples = new XArray<JobTuple>();
            for (var i = 0; i < this.Tuples.length; i++)
            {
                let ttpl = this.Tuples[i];
                let stpl = pDataSet.Tuples[i];
            }
        }

        override New()
        {
            var tpl = new JobTuple();
            tpl.CORxJobID.Value = Guid.NewGuid();
            tpl.State = XTupleState.Added;
            this.Tuples.Add(tpl);
        }
    }

    export class JobRequest extends XRequest
    {
        CORxJobID?: string;
    }

    export class JobFilter extends XFilter
    {
        Nome = new XDataField(XFieldState.Empty, () => 'XString', () => '', null, null, '0fd9ab4d-967c-49dd-9e6c-e6f89af73e1a');
    }
}
