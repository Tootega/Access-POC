//<auto-generated/>
import { HttpClient } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { environment } from 'src/environments/environment';
import { XService, XRule } from 'material/Component/XComponent';
import { STXCoreAutomatedsJobsJobMDL } from './Job.Model';
import { STXCoreAutomatedsJobsJobRLE } from './Job.Service.Rule';

export namespace STXCoreAutomatedsJobsJobSVC
{

    @Injectable()
    export class JobService extends XService
    {

        static CID = 'D1DCBC2A-1B2B-4E73-BB71-E0ADF853C335';

        static Create(http: HttpClient): JobService
        {
            return new JobService(http, null);
        }

        constructor(private http: HttpClient, public Rule: STXCoreAutomatedsJobsJobRLE.JobRule)
        {
            super();
        }

        override DoSearch(pCallback: XMethod<XDataSet<XDataTuple>>)
        {
            let filter = new STXCoreAutomatedsJobsJobMDL.JobFilter();
            this.Search(filter, pCallback);
        }

        Search(pFilter: STXCoreAutomatedsJobsJobMDL.JobFilter, pCallback: XMethod<STXCoreAutomatedsJobsJobMDL.JobDataSet>)
        {
            let ret = this.http.post(`${environment.apiBaseURI}/STXCore/Automateds/Jobs/Job/Search`, pFilter);
            ret.subscribe({
                next: (dst) =>
                {
                    let ndst = new STXCoreAutomatedsJobsJobMDL.JobDataSet(<any>dst);
                    pCallback.apply(ndst, [ndst]);
                }
            });
        }

        GetByPK(pRequest: STXCoreAutomatedsJobsJobMDL.JobRequest, pCallback: XMethod<STXCoreAutomatedsJobsJobMDL.JobDataSet>)
        {
            var ret = this.http.post(`${environment.apiBaseURI}/STXCore/Automateds/Jobs/Job/GetByPK`, pRequest);
            ret.subscribe({
                next: (dst) =>
                {
                    let ndst = new STXCoreAutomatedsJobsJobMDL.JobDataSet(<any>dst);
                    pCallback.apply(ndst, [ndst]);
                }
            });
        }

        New(pCallback: XMethod<STXCoreAutomatedsJobsJobMDL.JobDataSet>)
        {
            let ndst = new STXCoreAutomatedsJobsJobMDL.JobDataSet();
            ndst.New();
            pCallback.apply(ndst, [ndst]);
        }

        Save(pDataSet: STXCoreAutomatedsJobsJobMDL.JobDataSet, pCallback: XMethod<boolean>)
        {
            var ret = this.http.post(`${environment.apiBaseURI}/STXCore/Automateds/Jobs/Job/Flush`, pDataSet);
            ret.subscribe({
                next: (isok) =>
                {
                    pCallback.apply(isok, [isok]);
                }
            });
        }
    }
}
